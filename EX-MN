#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 25 19:25:48 2020

@author: wqs
"""
import os,sys
import phoebe,ellc
from phoebe import u # units
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
    
logger = phoebe.logger('error')

data_lc=pd.read_csv('/Projects/PHOEBE/N160310.txt',header=0,sep=' ')
times=data_lc['JDHEL'].values-2457458
fluxes=10**(-0.4*data_lc['V-C'].values)*25
sigmas=fluxes*np.log(10)*(-0.4)*data_lc['s1'].values
plt.errorbar(times,fluxes,sigmas)


b = phoebe.default_binary()
b.add_constraint('semidetached', 'secondary')
b.add_constraint('whitedwarf', 'primary')

b.add_dataset('lc', compute_phases=phoebe.linspace(0,1,201),
              times=times, fluxes=fluxes, sigmas=sigmas, dataset='lc01', 
              passband='Johnson:V', overwrite=True)

b.set_value('incl', component='binary', value=85*u.deg)
b.set_value('period', component='binary', value=0.1412437990*u.d)
b.set_value('teff', component='primary', value=20000*u.K)
b.set_value('teff', component='secondary', value=3000*u.K)
b.flip_constraint('mass@primary', solve_for='sma@binary')
b.set_value('mass', component='primary', value=0.8*u.solMass)
b.flip_constraint('mass@secondary', solve_for='q')
b.set_value('mass', component='secondary', value=0.2*u.solMass)
b.set_value('t0_supconj', component='binary', value=0.62831)

b['gravb_bol@primary'] = 0
b['irrad_frac_refl_bol@primary']=0

b.set_value_all('atm', component='primary', value='blackbody')
b.set_value_all('ld_mode', component='primary', value='manual')
b.set_value_all('ld_func', component='primary', value='quadratic')
b.set_value_all('ld_coeffs', component='primary', dataset='lc01', value=[0.1225,0.3086])
b.set_value_all('ld_mode_bol@primary','manual')
b.set_value_all('ld_func_bol@primary','quadratic')
b.set_value_all('ld_coeffs_bol', component='primary', value=[0.1421,0.3693])
b.set_value_all('atm', component='secondary', value='phoenix')
b.set_value_all('ld_mode', component='secondary', value='lookup')

b.set_value_all('distortion_method@primary', value='sphere')
b.set_value_all('ntriangles@secondary', value=15000)

b.set_value_all('pblum_mode', 'dataset-scaled') #scale to the flux-levels of the obs.
#b.set_value_all('pblum_method', 'phoebe')
b.set_value_all('irrad_method', 'none')

print(b.run_checks())

b.add_solver('optimizer.nelder_mead',solver='nelder_mead01',overwrite=True,
             fit_parameters=['teff@primary', 'incl@binary', 'mass@secondary', 'mass@primary'])
print(b.get_solver(kind='nelder_mead'))
b.run_solver(kind='nelder_mead', maxiter=1000, solution='nm_sol')
print(b.get_solution('nm_sol').filter(qualifier=['message', 'nfev', 'niter', 'success']))
print(b.adopt_solution('nm_sol', trial_run=True))
b.adopt_solution('nm_sol')
b.run_compute(compute='phoebe01', model='after_nm', overwrite=True)
_ = b.plot(x='phases', 
           c={'after_estimators': 'red', 'after_nm': 'green', 'dataset': 'black'}, 
           linestyle={'after_estimators': 'dashed', 'after_nm': 'solid'},
           marker={'dataset': '.'},
           save='figure_optimizer_nm.pdf', show=True)


